---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import { Icon } from "astro-icon/components";

interface Props {
	href: string;
	target?: string;
	icon?: {
		name: string;
		color?: string;
		class?: string;
		invertInDark?: boolean;
	};
	image?: {
		src: string | ImageMetadata;
		alt: string;
		width: number;
		height: number;
		class?: string;
	};
	title: string;
	label?: string;
	dense?: boolean;
	color?: string;
}

const {
	href,
	target,
	icon,
	image,
	title,
	label,
	dense = false,
	color,
} = Astro.props;

// For dense layout, image dimensions should be 48x48 (3rem)
const imageSize = dense ? 48 : (image?.width ?? 0);
---

<a
	href={href}
	target={target}
	class:list={[
		"outline-[0.5px] outline-muted p-8 flex gap-4 group gradient-cursor",
		{
			"flex-col": !dense && imageSize >= 100,
			"items-center": dense || !image || imageSize < 100,
		},
	]}
	style={`--cursor-color: ${color ? `#${color.replace("#", "")}` : "#FFFF00"}`}
>
	<script>
		function handleMouseMove(e: Event) {
			const event = e as MouseEvent;
			const tile = event.currentTarget as HTMLElement;
			const rect = tile.getBoundingClientRect();
			const x = event.clientX - rect.left;
			const y = event.clientY - rect.top;

			tile.style.setProperty("--x", `${x}px`);
			tile.style.setProperty("--y", `${y}px`);
			tile.classList.add("active");
		}

		function handleMouseLeave(e: Event) {
			const tile = e.currentTarget as HTMLElement;
			tile.classList.remove("active");
			tile.style.removeProperty("--x");
			tile.style.removeProperty("--y");
		}

		// Add event listeners to all tiles
		document.querySelectorAll(".gradient-cursor").forEach((tile) => {
			tile.addEventListener("mousemove", handleMouseMove as EventListener);
			tile.addEventListener("mouseleave", handleMouseLeave as EventListener);
		});
	</script>

	{
		icon && (
			<Icon
				name={icon.name}
				class:list={[
					"h-5 w-5 flex-shrink-0",
					icon.class,
					{ "dark:invert": icon.invertInDark },
				]}
				style={icon.color ? `color: ${icon.color}` : undefined}
			/>
		)
	}

	{
		image && (
			<div
				class:list={[
					dense ? "w-12 h-12" : "w-full",
					"relative",
					{ "aspect-[3/2]": !dense, "aspect-square": dense },
				]}
			>
				{typeof image.src === "string" ? (
					<img
						src={image.src}
						alt={image.alt}
						width={dense ? 48 : image.width}
						height={dense ? 48 : image.height}
						class="absolute object-cover w-full h-full rounded-xs mix-blend-multiply dark:mix-blend-screen"
						loading="lazy"
						decoding="async"
					/>
				) : (
					<Image
						src={image.src}
						alt={image.alt}
						width={dense ? 48 : image.width}
						height={dense ? 48 : image.height}
						class="absolute object-cover w-full h-full rounded-xs mix-blend-multiply dark:mix-blend-screen"
						loading="lazy"
						decoding="async"
					/>
				)}
			</div>
		)
	}

	<div class="flex flex-col gap-y-1">
		<h3 class="text-sm font-medium">
			<span class="animated-underline group-hover:after:w-full">
				{title}
			</span>
		</h3>
		{
			label && (
				<span class="text-sm transition-all duration-200 text-muted-foreground/80 group-hover:text-muted-foreground">
					{label}
				</span>
			)
		}
	</div>
</a>
