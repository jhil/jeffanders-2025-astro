---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import Tile from "./Tile.astro";

interface Project {
	data: {
		title: string;
		brief: string;
		date: string;
		cover: string;
		external?: string;
		color?: string;
	};
	slug: string;
}

const { projects }: { projects: Project[] } = Astro.props as {
	projects: Project[];
};

// Sort projects by date directly in the component script
const sortedProjects = [...projects].sort(
	(a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

// Function to get the image path or import it dynamically
async function getImageSource(project: Project) {
	if (project.data.cover.startsWith("http")) {
		return project.data.cover;
	}

	// For local images, use dynamic import
	try {
		// Use dynamic import for local images
		const images = import.meta.glob<{ default: ImageMetadata }>(
			"/src/images/projects/**/*.{jpeg,jpg,png,gif,avif,webp,svg}"
		);
		const imagePath = `/src/images/projects/${project.slug}/${project.data.cover}`;

		if (images[imagePath]) {
			const image = await images[imagePath]();
			return image.default;
		} else {
			console.error(`Image not found: ${imagePath}`);
			return project.data.cover; // Fallback to the original path
		}
	} catch (error) {
		console.error("Error loading image:", error);
		return project.data.cover; // Fallback to the original path
	}
}

// Process all images upfront
const projectImages = await Promise.all(
	sortedProjects.map(async (project) => ({
		project,
		imageSource: await getImageSource(project),
	}))
);
---

<section id="projects">
	<!-- <h1
		class="px-4 sm:px-8 pt-24 pb-8 text-xl sm:text-2xl font-medium outline-[0.5px] outline-muted"
	>
		Projects
	</h1> -->
	<div
		class="grid justify-center grid-cols-[repeat(auto-fit,minmax(12rem,1fr))] sm:grid-cols-[repeat(auto-fit,minmax(16rem,1fr))]"
	>
		{
			projectImages.map(({ project, imageSource }) => {
				const link = project.data.external
					? project.data.external
					: `/${project.slug}`;

				return (
					<Tile
						href={link}
						target={project.data.external ? "_blank" : undefined}
						image={{
							src: imageSource,
							alt: project.data.title,
							width: 384,
							height: 256,
						}}
						title={project.data.title}
						label={project.data.brief}
						color={project.data.color}
					/>
				);
			})
		}
	</div>
</section>
